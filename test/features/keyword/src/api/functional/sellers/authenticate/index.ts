/**
 * @packageDocumentation
 * @module api.functional.sellers.authenticate
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { EncryptedFetcher } from "@nestia/fetcher/lib/EncryptedFetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive, Resolved } from "typia";

import type { ISeller } from "../../../structures/ISeller";

export * as password from "./password";

/**
 * Join as a seller.
 *
 * @param props.input Information of yours
 * @return Information of newly joined seller
 * @setHeader authorization.token Authorization
 *
 * @controller SellerAuthenticateController.join
 * @path POST /sellers/authenticate/join
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function join(
  connection: IConnection,
  props: join.IProps,
): Promise<join.Response> {
  const output: Primitive<ISeller.IAuthorized> = await EncryptedFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "text/plain",
      },
    },
    {
      ...join.METADATA,
      template: join.METADATA.path,
      path: join.path(),
    },
    props.input,
  );
  connection.headers ??= {};
  connection.headers.Authorization = output.authorization.token;
  return output;
}
export namespace join {
  export type IProps = {
    input: ISeller.IJoin;
  };
  export type RequestBody = Resolved<ISeller.IJoin>;
  export type Response = Primitive<ISeller.IAuthorized>;

  export const METADATA = {
    method: "POST",
    path: "/sellers/authenticate/join",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "text/plain",
      encrypted: true,
    },
    status: 201,
  } as const;

  export const path = () => "/sellers/authenticate/join";
}

/**
 * Log-in as a seller.
 *
 * @param props.input Email and password
 * @return Information of the seller
 * @assignHeaders authorization
 *
 * @controller SellerAuthenticateController.login
 * @path POST /sellers/authenticate/login
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function login(
  connection: IConnection,
  props: login.IProps,
): Promise<login.Response> {
  const output: Primitive<ISeller.IAuthorized> = await EncryptedFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "text/plain",
      },
    },
    {
      ...login.METADATA,
      template: login.METADATA.path,
      path: login.path(),
    },
    props.input,
  );
  connection.headers ??= {};
  Object.assign(connection.headers, output.authorization);
  return output;
}
export namespace login {
  export type IProps = {
    input: ISeller.ILogin;
  };
  export type RequestBody = Resolved<ISeller.ILogin>;
  export type Response = Primitive<ISeller.IAuthorized>;

  export const METADATA = {
    method: "POST",
    path: "/sellers/authenticate/login",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "text/plain",
      encrypted: true,
    },
    status: 201,
  } as const;

  export const path = () => "/sellers/authenticate/login";
}

/**
 * Erase the seller by itself.
 * @controller SellerAuthenticateController.exit
 * @path DELETE /sellers/authenticate/exit
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function exit(connection: IConnection): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...exit.METADATA,
    template: exit.METADATA.path,
    path: exit.path(),
  });
}
export namespace exit {
  export const METADATA = {
    method: "DELETE",
    path: "/sellers/authenticate/exit",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/sellers/authenticate/exit";
}
