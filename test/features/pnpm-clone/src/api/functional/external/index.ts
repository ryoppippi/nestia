/**
 * @packageDocumentation
 * @module api.functional.external
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { INestiaConfig } from "../../structures/INestiaConfig";
import type { ISomething } from "../../structures/ISomething";
import type { PartialINothing } from "../../structures/PartialINothing";

/**
 * @controller ExternalController.config
 * @path POST /external/config/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function config(
  connection: IConnection,
  id: string & Format<"uuid">,
  query: config.Query,
  body: config.Body,
): Promise<config.Output> {
  return PlainFetcher.propagate<any, any>(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...config.METADATA,
      template: config.METADATA.path,
      path: config.path(id, query),
    },
    body,
  );
}
export namespace config {
  export type Query = PartialINothing;
  export type Body = ISomething;
  export type Output = IPropagation<
    {
      201: INestiaConfig;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/external/config/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (id: string & Format<"uuid">, query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/external/config/${encodeURIComponent(id?.toString() ?? "null")}`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
