/**
 * @packageDocumentation
 * @module api.functional.template
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Resolved } from "typia";

import type { Template } from "../../structures/Template";

/**
 * @controller TemplateController.index
 * @path GET /template
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return !!connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...index.METADATA,
        template: index.METADATA.path,
        path: index.path(),
      });
}
export namespace index {
  export type Response = Template[];

  export const METADATA = {
    method: "GET",
    path: "/template",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/template";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Template[]> => typia.random<Template[]>(g);
  export const simulate = (connection: IConnection): Response => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * @controller TemplateController.at
 * @path GET /template/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  props: at.IProps,
): Promise<at.Response> {
  return !!connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(connection, {
        ...at.METADATA,
        template: at.METADATA.path,
        path: at.path(props),
      });
}
export namespace at {
  export type IProps = {
    id: number;
  };
  export type Response = Template;

  export const METADATA = {
    method: "GET",
    path: "/template/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (p: { id: number }) =>
    `/template/${encodeURIComponent(p.id?.toString() ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Template> => typia.random<Template>(g);
  export const simulate = (
    connection: IConnection,
    props: IProps,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(props),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(props.id));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * @controller TemplateController.store
 * @path POST /template
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function store(
  connection: IConnection,
  props: store.IProps,
): Promise<store.Response> {
  return !!connection.simulate
    ? store.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...store.METADATA,
          template: store.METADATA.path,
          path: store.path(),
        },
        props.body,
      );
}
export namespace store {
  export type IProps = {
    body: Template;
  };
  export type RequestBody = Template;
  export type Response = Template;

  export const METADATA = {
    method: "POST",
    path: "/template",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/template";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Template> => typia.random<Template>(g);
  export const simulate = (
    connection: IConnection,
    props: IProps,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(props.body));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
