/**
 * @packageDocumentation
 * @module api.functional.objectLiteral
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Resolved } from "typia";

import type { ObjectLietral } from "../../structures/ObjectLietral";

export * as literal from "./literal";

/**
 * @controller ObjectLiteralController.index
 * @path GET /objectLiteral
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(connection: IConnection): Promise<index.Output> {
  return !!connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.propagate<any>(connection, {
        ...index.METADATA,
        template: index.METADATA.path,
        path: index.path(),
      });
}
export namespace index {
  export type Output = IPropagation<
    {
      200: ObjectLietral[];
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/objectLiteral",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/objectLiteral";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<ObjectLietral[]> => typia.random<ObjectLietral[]>(g);
  export const simulate = (connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    } as Output;
  };
}
